% Generated by roxygen2 (4.0.1): do not edit by hand
\name{read.avro}
\alias{read.avro}
\title{Avro Data Input}
\usage{
read.avro(file, n = -1L, flatten = T, simplify = F,
  buffer.length = 10000)
}
\arguments{
\item{file}{path to an Avro data file}

\item{n}{the maximum number of Avro datums to read}

\item{buffer.length}{the (maximum) number of records to import at a time for conversion to
R objects}

\item{flatten}{combine all logical "record" fields into a single top-level dataframe}

\item{simplify}{logical or character string; should the result be simplified to a vector,
matrix or higher dimensional array if possible? The default value, TRUE, returns a vector
or matrix if appropriate. For more details, see \code{\link{sapply}}.}
}
\value{
Avro types will be converted to R object with the following mapping:

\itemize{
\item \code{null} -> R's \code{NA} value
\item \code{boolean} -> \code{logical}
\item \code{int}` -> \code{integer}
\item \code{long} -> \code{integer64} (from the `bit64` package)
\item \code{float},\code{double} -> \code{numeric}
\item \code{bytes},\code{fixed} -> \code{character} (\code{charToRaw} allows conversion to vector of type \code{raw})
\item \code{string} -> \code{character}
\item \code{record} -> \code{data.frame} (see below)
\item \code{enum} -> \code{factor}
\item \code{array} -> \code{list}
\item \code{map} ->  named \code{list}
\item \code{union} -> \code{list} or \code{vector}
}

In addition to this type mapping, the specific data structure is determined by
the options \code{flatten} and \code{simplify}.  The \code{simplify} option causes
\code{array} elements to be simplified in the same way that \code{\link{sapply}} results
are.

The \code{flatten} option causes nested \code{record} elements to be "lifted" up to the
top-level dataframe value.  For example, the \code{\link{iris}} dataset could be stored as a
top-level "iris" record containing "Sepal" and "Petal" \code{record} fields and a "Species"
\code{string} field.  When \code{flatten=TRUE}, this Avro dataset would be imported with the
same structure as the \code{\link{iris}} dataset.  Alternatively, \code{flatten=FALSE} would
import the same Avro dataset as a dataframe containing three columns, "Sepal" and "Petal" columns
that are themselves dataframes, and a "Species" column containing \code{character} values.
This serialization of the \code{\link{iris}} dataset is stored as \code{data/iris.avro}.

For Avro \code{record} types, the \code{row.names} attribute is retrieved from the "row_names"
field, if such a field exists.
}
\description{
Reads a file in the Avro format and creates an appropriate R data value from it corresponding to the Avro schema used to create the file.
}
\details{
Reads an Avro data file into R in a four-step process:
\enumerate{
\item Retrieve the Avro schema used to write the Avro data file
\item Convert the Avro data to a \code{JSON} file using the Java Avro Tools
\item Read the \code{JSON} data into R and parse it using \code{\link{fromJSON}}
\item Using the schema, complete any additional transformations of the data to
compatible and useful R objects}

Steps 3 and 4 are repeated, processing \code{buffer.length} Avro datum elements at a time
until either \code{n} records have been processed or the end of the file is reached.

The specific Avro Tools jar file is defined by \code{\link{AVRO_TOOLS}}
}
\examples{
# Built-in mtcars dataset

# Write out the data
mtavro_path <- tempfile(fileext=".avro")
write.avro(mtcars,mtavro_path)

# Read in the data
mtavro <- read.avro(mtavro_path)
names(mtavro)
# [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
all.equal(mtcars,mtavro)
# [1] TRUE

# Inspect the Avro schema
str(avro_get_schema(mtavro_path))

# Built-in iris dataset
# Write out the data
iris_avro_path <- tempfile(fileext=".avro")
write.avro(iris,iris_avro_path,unflatten=TRUE)

# Importing flattened data
str(read.avro(iris_avro_path,flatten=TRUE))
#'data.frame':  150 obs. of  5 variables:
#  $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
#  $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
#  $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
#  $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
#  $ Species     : Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...

# Importing unflattened data
str(read.avro(iris_avro_path,flatten=FALSE))
#'data.frame':  150 obs. of  3 variables:
# $ Sepal  :'data.frame':	150 obs. of  2 variables:
#   ..$ Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...
# ..$ Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...
# $ Petal  :'data.frame':	150 obs. of  2 variables:
#   ..$ Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...
# ..$ Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...
# $ Species: Factor w/ 3 levels "setosa","versicolor",..: 1 1 1 1 1 1 1 1 1 1 ...
}
\references{
Apache Avro 1.7.6 Specification. \url{http://avro.apache.org/docs/1.7.6/spec.html}.
}
\seealso{
\code{\link{integer64}}, \code{\link{AVRO_TOOLS}}
}

